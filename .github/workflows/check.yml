name: Check
on:
  push:
    branches: [ main ]
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:

  fix_stupid_mistakes:
    name: Fix stupid mistakes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref_type == 'branch'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Run autoflake
        run: autoflake --recursive --in-place --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys .
      - name: Run isort
        run: isort .
      - name: Run Black
        run: black .
      - name: Push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ¤¦"

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - 3.11
          - 3.12-dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Coverage.py
        run: grep "^coverage" requirements-dev.txt | xargs pip install
      - name: Run tests
        run: |
          python3 -m examples.test
          coverage run -m tests
      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v3
        with:
          path: .coverage
          name: coverage

  mypy:
    name: mypy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - 3.11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: grep -E "^(mypy|typing-extensions)" requirements-dev.txt | xargs pip install
      - name: Run mypy
        run: mypy --python-version  ${{ matrix.python-version }}

  pytype:
    name: pytype
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Run pytype
        run: pytype

  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Run Flake8
        run: flake8

  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Run Pylint
        run: pylint .

  bandit:
    name: Bandit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install requirements
        run: pip install -r requirements-dev.txt
      - name: Run Bandit
        run: bandit -c pyproject.toml -r typed_stream examples

  github-pages:
    name: GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - test
    permissions:
      contents: read
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
      - name: Install Coverage.py
        run: grep "^coverage" requirements-dev.txt | xargs pip install
      - name: Create directory
        run: mkdir github-pages
      - name: Create coverage files
        run: |
          coverage report --precision=3 --sort=-miss --skip-covered
          coverage html -d github-pages/coverage
          coverage json -o github-pages/coverage.json
          ./generate-badge.sh > github-pages/coverage/badge.svg
          rm github-pages/coverage/.gitignore
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: github-pages
      - name: Deploy GitHub Pages site
        id: deployment
        uses: actions/deploy-pages@v1
