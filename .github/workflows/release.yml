name: Release
on:
  push:
    branches: [ main ]
    paths:
      - 'typed_stream/version.py'
env:
  PIP_DISABLE_PIP_VERSION_CHECK: yes

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install build frontend
        run: grep "^build==" requirements-dev.txt | xargs pip install
      - name: Build
        run: make build
      - name: Upload as build artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist

  check:
    name: Check for mistakes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Create venv
        run: python3 -m venv venv
      - name: Run checks
        run: ./check.sh

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.12"
          - "pypy3.10"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tests
        run: |
          python3 -m tests
          python3 -m examples.test

  release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build
      - check
      - test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
      - name: Version
        id: version
        run: |
          echo -n "VERSION=" >> $GITHUB_OUTPUT
          ./typed_stream/version.py >> $GITHUB_OUTPUT
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          generate_release_notes: true
          files: |
            *.tar.gz
            *.whl

  pypi:
    name: Upload to PyPI
    runs-on: ubuntu-latest
    needs:
      - build
      - check
      - test
    permissions: {}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
      - name: Install Twine
        run: pip install "twine==4.*"
      - name: Run Twine
        run: |
          twine check --strict *.tar.gz *.whl
          twine upload --verbose --disable-progress-bar *.tar.gz *.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
